// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/recipe/v1alpha1/recipe.proto

package recipev1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/JoshuaWilkes/react-native-example-app/pkg/gen/proto/recipe/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RecipeServiceName is the fully-qualified name of the RecipeService service.
	RecipeServiceName = "recipe.v1alpha1.RecipeService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RecipeServiceQueryRecipesProcedure is the fully-qualified name of the RecipeService's
	// QueryRecipes RPC.
	RecipeServiceQueryRecipesProcedure = "/recipe.v1alpha1.RecipeService/QueryRecipes"
	// RecipeServiceTopRecipesProcedure is the fully-qualified name of the RecipeService's TopRecipes
	// RPC.
	RecipeServiceTopRecipesProcedure = "/recipe.v1alpha1.RecipeService/TopRecipes"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	recipeServiceServiceDescriptor            = v1alpha1.File_proto_recipe_v1alpha1_recipe_proto.Services().ByName("RecipeService")
	recipeServiceQueryRecipesMethodDescriptor = recipeServiceServiceDescriptor.Methods().ByName("QueryRecipes")
	recipeServiceTopRecipesMethodDescriptor   = recipeServiceServiceDescriptor.Methods().ByName("TopRecipes")
)

// RecipeServiceClient is a client for the recipe.v1alpha1.RecipeService service.
type RecipeServiceClient interface {
	QueryRecipes(context.Context, *connect.Request[v1alpha1.QueryRecipesRequest]) (*connect.Response[v1alpha1.QueryRecipesResponse], error)
	TopRecipes(context.Context, *connect.Request[v1alpha1.TopRecipesRequest]) (*connect.Response[v1alpha1.TopRecipesResponse], error)
}

// NewRecipeServiceClient constructs a client for the recipe.v1alpha1.RecipeService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRecipeServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RecipeServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &recipeServiceClient{
		queryRecipes: connect.NewClient[v1alpha1.QueryRecipesRequest, v1alpha1.QueryRecipesResponse](
			httpClient,
			baseURL+RecipeServiceQueryRecipesProcedure,
			connect.WithSchema(recipeServiceQueryRecipesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		topRecipes: connect.NewClient[v1alpha1.TopRecipesRequest, v1alpha1.TopRecipesResponse](
			httpClient,
			baseURL+RecipeServiceTopRecipesProcedure,
			connect.WithSchema(recipeServiceTopRecipesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// recipeServiceClient implements RecipeServiceClient.
type recipeServiceClient struct {
	queryRecipes *connect.Client[v1alpha1.QueryRecipesRequest, v1alpha1.QueryRecipesResponse]
	topRecipes   *connect.Client[v1alpha1.TopRecipesRequest, v1alpha1.TopRecipesResponse]
}

// QueryRecipes calls recipe.v1alpha1.RecipeService.QueryRecipes.
func (c *recipeServiceClient) QueryRecipes(ctx context.Context, req *connect.Request[v1alpha1.QueryRecipesRequest]) (*connect.Response[v1alpha1.QueryRecipesResponse], error) {
	return c.queryRecipes.CallUnary(ctx, req)
}

// TopRecipes calls recipe.v1alpha1.RecipeService.TopRecipes.
func (c *recipeServiceClient) TopRecipes(ctx context.Context, req *connect.Request[v1alpha1.TopRecipesRequest]) (*connect.Response[v1alpha1.TopRecipesResponse], error) {
	return c.topRecipes.CallUnary(ctx, req)
}

// RecipeServiceHandler is an implementation of the recipe.v1alpha1.RecipeService service.
type RecipeServiceHandler interface {
	QueryRecipes(context.Context, *connect.Request[v1alpha1.QueryRecipesRequest]) (*connect.Response[v1alpha1.QueryRecipesResponse], error)
	TopRecipes(context.Context, *connect.Request[v1alpha1.TopRecipesRequest]) (*connect.Response[v1alpha1.TopRecipesResponse], error)
}

// NewRecipeServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRecipeServiceHandler(svc RecipeServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	recipeServiceQueryRecipesHandler := connect.NewUnaryHandler(
		RecipeServiceQueryRecipesProcedure,
		svc.QueryRecipes,
		connect.WithSchema(recipeServiceQueryRecipesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	recipeServiceTopRecipesHandler := connect.NewUnaryHandler(
		RecipeServiceTopRecipesProcedure,
		svc.TopRecipes,
		connect.WithSchema(recipeServiceTopRecipesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/recipe.v1alpha1.RecipeService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RecipeServiceQueryRecipesProcedure:
			recipeServiceQueryRecipesHandler.ServeHTTP(w, r)
		case RecipeServiceTopRecipesProcedure:
			recipeServiceTopRecipesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRecipeServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRecipeServiceHandler struct{}

func (UnimplementedRecipeServiceHandler) QueryRecipes(context.Context, *connect.Request[v1alpha1.QueryRecipesRequest]) (*connect.Response[v1alpha1.QueryRecipesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("recipe.v1alpha1.RecipeService.QueryRecipes is not implemented"))
}

func (UnimplementedRecipeServiceHandler) TopRecipes(context.Context, *connect.Request[v1alpha1.TopRecipesRequest]) (*connect.Response[v1alpha1.TopRecipesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("recipe.v1alpha1.RecipeService.TopRecipes is not implemented"))
}
